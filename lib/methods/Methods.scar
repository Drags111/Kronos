unit kronos.lib.methods.Methods;

(*
Methods
=======

Contains all of the basic functions and procedures that are common throughout
the include and do not necessarily have a particular category.

*)

interface

  uses
    kronos.smart.SMART,
    kronos.lib.core.Hooks,
    kronos.lib.core.Globals,
    Math, Types;

  function GetMyPos: TTile;
  function GetMyLocPos: TTile;
  function GetMyPlane: Integer;
  function GetSetting(Setting: Integer): Integer;

  function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;
  function InStrArray(StrArray: TStrArray; Str: String): Boolean;
  procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
  procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;

implementation

(*
GetMyPos
~~~~~~~~

.. code-block:: pascal

    function GetMyPos: TTile;

Returns your current tile.

.. note::

  by Benland100

*)
function GetMyPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := SmartGetFieldInt(0, hook_static_BaseX) + SmartGetFieldInt(Me, hook_animable_PixelX) div 512;
  Result.y := SmartGetFieldInt(0, hook_static_BaseY) + SmartGetFieldInt(Me, hook_animable_PixelY) div 512;
  SmartFreeObject(Me);
end;

(*
GetMyLocPos
~~~~~~~~~~~

.. code-block:: pascal

    function GetMyLocPos: TTile;

Returns your local position.

.. note::

  by Benland100

*)
function GetMyLocPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := (SmartGetFieldInt(Me, hook_animable_PixelX) - SmartGetFieldInt(0, hook_static_BaseX)) div 512;
  Result.y := (SmartGetFieldInt(Me, hook_animable_PixelY) - SmartGetFieldInt(0, hook_static_BaseY)) div 512;
  SmartFreeObject(Me);
end;

(*
GetMyPlane
~~~~~~~~~~

.. code-block:: pascal

    function GetMyPlane: Integer;

Returns your current plane. (ground level, underground, above ground, etc.)

.. note::

  by Benland100

*)
function GetMyPlane: Integer;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result := SmartGetFieldByte(Me, hook_animable_Plane);
  SmartFreeObject(Me);
end;

(*
R_GetSettingArray
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSettingArray: TIntegerArray;

Retrives the Settings array from the client.

.. note::

  by Drags111

*)
function GetSettingArray: TIntArray;
var
  SettingArray, Data, DL, i: Integer;
begin
  try
    SettingArray := SmartGetFieldObject(0, hook_static_GetSettings);
    Data := SmartGetFieldObject(SettingArray, hook_settingarray_GetData);

    DL := SmartGetFieldArraySize(Data, '', 1);
    SetLength(Result, DL);
    for i := 0 to DL-1 do
      Result[i] := SmartGetFieldArrayInt(data, '', i);

  finally
    SmartFreeObject(Data);
    SmartFreeOBject(SettingArray);
  end;
end;

(*
R_GetSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSetting(Setting: Integer): Integer;

Gets the setting value at the specified index.

.. note::

  by Drags111

*)
function GetSetting(Setting: Integer): Integer;
var
  SA: TIntArray;
begin
  SA := GetSettingArray;
  if(Setting < Length(SA))then
    Result := SA[Setting]
  else
  begin
    Println('Incorrect setting index passed to GetSetting');
    Result := -1;
  end;
end;

(*
InIntArray
~~~~~~~~~~

.. code-block:: pascal

    function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;

Returns true if the Int is found in the IntArray.

.. note::

  by Drags111

*)
function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;
var
  I, H: Integer;
begin
  Result := False;
  H := High(IntArray);
  for I := 0 to H do
    if(IntArray[I] = Int)then
    begin
      Result := True;
      Exit;
    end;
end;

(*
InStringArray
~~~~~~~~~~~~~

.. code-block:: pascal

    function InStringArray(StringArray: TStrArray; Str: String): Boolean;

Returns true if the Str is found in the StringArray.

.. note::

  by Drags111

*)
function InStrArray(StrArray: TStrArray; Str: String): Boolean;
var
  I, H: Integer;
begin
  Result := False;
  H := High(StrArray);
  for I := 0 to H do
    if(StrArray[I] = Str)then
    begin
      Result := True;
      Exit;
    end;
end;

(*
QuickTPASort
~~~~~~~~~~~~

.. code-block:: pascal

    procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);

.. note::

  by Wizzup

*)
procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
var
  Lo, Hi, Mid, T: Integer;
  TP: TPoint;
begin
  if (Length(A) <> Length(B)) then Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  repeat
    if SortUp then
    begin
      while (A[Lo] < Mid) do Inc(Lo);
      while (A[Hi] > Mid) do Dec(Hi);
    end else
    begin
      while (A[Lo] > Mid) do Inc(Lo);
      while (A[Hi] < Mid) do Dec(Hi);
    end;
    if (Lo <= Hi) then
    begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    end;
  until Lo > Hi;
  if (Hi > iLo) then QuickTPASort(A, B, iLo, Hi, SortUp);
  if (Lo < iHi) then QuickTPASort(A, B, Lo, iHi, SortUp);
end;

(*
SortTPAFrom
~~~~~~~~~~~

.. code-block:: pascal

    procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;

Sorts a TPA by distance from the point From.

.. note::

  by Wizzup

*)
procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;
var
   i, l: Integer;
   DistArr: TIntArray;
begin
  l := High(a);
  if (l < 0) then Exit;
  SetLength(DistArr, l + 1);
  for i := 0 to l do
    DistArr[i] := Math.Round(Math.Sqr(From.x - a[i].x) + Sqr(From.y - a[i].y));
  QuickTPASort(DistArr, a, 0, l, True);
end;

end.