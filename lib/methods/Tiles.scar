unit kronos.lib.methods.Tiles;

(*
Tiles
=====

This file relates to Map and Screen locations and converting them to Tiles. The
methods and formulas here relate to hooks into the Runescape Client's rendering
system, and therefore a brief description about how those work will help a lot.

The Runescape world is laid out on a large grid. A coordinate on this grid is
called a Tile. The origin (0,0) is somewhere in the South Western corner of the
world, and the coordinates increase in the North Easternly direction.

A loading area is a smaller grid 104x104 tiles in size whose bounds can be
variable. The origin of the loading area is stored in the client as the global
tile position (BaseX, BaseY), therefore your local Tile position is your global
Tile position minux the origin of the loading area.

A tile is rendered as 512x512 pixels. Most positions in the renderer data are
measured in pixels. This means the loading area is 13312x13312 pixels in size.
to convert a local Tile into a pixel measurement, simply multiply the local Tile
coordinates by 512.

Each corner of a tile has a height stored in a 2D array in the current Plane
object. To calculate the average height of a tile, simply average the height of
its corners.

The client provides a rotation matrix, offset, and scaling values to transform
a "world" pixel coordinate into a "screen" coordinate. The formula for doing
this is found in the TileToMSEx function. Since one often requires sub tile
accuracy, offset values in the range of [0,1] are provided. (0.5,0.5) would be
the center, and (0,0) would be the south-west corner of the tile.

The minimap is simply a perfectly verticle view of the ground as if it were
perfectly flat. Tiles here have a size of 4x4 pixels, and the map is rotated
around your current position by an angle stored in MapAngle. The angle is in
the range [0,16384], with 0 being North and increasing counter-clockwise. The
math for converting a Tile into a "minimap" coordinate is provided in TileToMM.

  -Benland100

*)

interface

  uses
    kronos.smart.SMART,
    kronos.lib.core.Hooks,
    kronos.lib.core.Globals,
    kronos.lib.methods.Methods,
    kronos.lib.methods.Calculations,
    kronos.lib.wrappers.RenderData,
    kronos.lib.wrappers.Render,
    Time, Types, Math;

  var
    RenderData: TRenderData = TRenderData.Create;
    Render: TRender = TRender.Create;

  procedure UpdateRenderInfo;
  function GetTileHeight(Tile: TTile): Integer;
  function World3DToScreen(XX, YY, ZZ: Extended): TPoint;
  function TileToMS(Tile: TTile; OffX, OffY: Extended; Height: Integer): TPoint; overload;
  function TileToMS(Tile: TTile; Height: Integer): TPoint; overload;
  function TileOnMS(Tile: TTile; OffX, OffY: Extended; Height: Integer): Boolean; overload;
  function TileOnMS(Tile: TTile; Height: Integer): Boolean; overload;
  function CanReach(Tile: TTile; IsObject: Boolean; CollisionMap: T2DIntArray): Boolean; overload;
  function CanReach(Tile: TTile; IsObject: Boolean): Boolean; overload;

implementation

procedure UpdateRenderInfo;
var
  Toolkit, Viewport: Integer;
begin
  try
    Toolkit := SmartGetFieldObject(0, hook_static_Toolkit);
    Viewport := SmartGetFieldObject(Toolkit, hook_SDToolkit_Viewport);

    Render.Clear;
    RenderData.Clear;

    if SmartIsNull(Toolkit) or SmartIsNull(Viewport)then
      Exit;

    Render.Update(Toolkit);
    RenderData.Update(Viewport);
  finally
    if not SmartIsNull(Toolkit)then
      SmartFreeObject(Toolkit);
    if not SmartIsNull(Viewport)then
      SmartFreeObject(Viewport);
  end;
end;

(*
GetTileHeight
~~~~~~~~~~~~~

.. code-block:: pascal

    function GetTileHeight(Tile: TTile) : Integer;

Finds the average height of the local tile provided the tile is in the current
loading area and on a loaded plane.

.. note::

  by BenLand100

*)
function GetTileHeight(Tile: TTile): Integer;
var
  X, Y, CurPlane, GroundSetting, PlaneInstance: Integer;
begin
  X := Tile.X;
  Y := Tile.Y;
  if ((X < 0) or (X > 104) or (Y < 0) or (Y > 104)) then
  begin
    Result := 0;
    Exit;
  end;
  CurPlane := SmartGetFieldInt(0, hook_static_LoadedPlane);
  GroundSetting := SmartGetFieldArray3DByte(0, hook_static_GroundSettingsArray, 1, X, Y);
  if ((CurPlane < 3) and ((GroundSetting and 2) <> 0)) then
    CurPlane := CurPlane + 1;
  PlaneInstance := SmartGetFieldArrayObject(0, hook_static_PlaneArray, CurPlane);
  Result := Round((SmartGetFieldArray2DInt(PlaneInstance, hook_sdplane_TileHeights, X, Y) +
            SmartGetFieldArray2DInt(PlaneInstance, hook_sdplane_TileHeights, X + 1, Y) +
            SmartGetFieldArray2DInt(PlaneInstance, hook_sdplane_TileHeights, X, Y + 1) +
            SmartGetFieldArray2DInt(PlaneInstance, hook_sdplane_TileHeights, X + 1, Y + 1)) / 4);
  if(Result = -1)then
    Println('****************TileHight hooks are incorrect.*****************');
  SmartFreeObject(PlaneInstance);
end;

(*
World3DToScreen
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function World3DToScreen(xx, yy, zz: Extended): TPoint;

Converts a RS 3D point to a coordinate on the screen.

.. note::

  by Benland100

*)
function World3DToScreen(XX, YY, ZZ: Extended): TPoint;
var
  Z: Extended;
  X, Y: Integer;
begin
  Result := Point(-1,-1);
  UpdateRenderInfo;
  Z := RenderData.ZOff + Floor(RenderData.ZX * XX + RenderData.ZY * YY + RenderData.ZZ * ZZ);
  if ((Z >= Render.ZMin) or (Z <= Render.ZMax)) then
  begin
    X := Floor(Render.XScale * (Floor(RenderData.XOff) + Floor(RenderData.XX * XX +
               RenderData.XY * YY + RenderData.XZ * ZZ)) / Z);
    Y := Floor(Render.YScale * (Floor(RenderData.YOff) + Floor(RenderData.YX * XX +
               RenderData.YY * YY + RenderData.YZ * ZZ)) / Z);
    if ((X >= Render.XMin) and (X <= Render.XMax) and
        (Y >= Render.YMin) and (Y <= Render.YMax)) then
    begin
      Result.X:= Floor(X - Render.XMin) + 4;
      Result.Y:= Floor(Y - Render.YMin) + 4;
    end;
  end;
end;

(*
TileToMS
~~~~~~~~~~

.. code-block:: pascal

    function TileToMS(Tile: TTile; OffX, OffU: Extended; Height: Integer): TPoint; overload;

Converts the global tile position, a position on that tile in the range
[(0,0), (1,1)] with (0.5, 0.5) being center and a height above ground level to
a screen location on the main screen, taking camera position and rotation into
account.

.. note::

  by Benland100

*)
function TileToMS(Tile: TTile; OffX, OffY: Extended; Height: Integer): TPoint; overload;
var
  PixelX, PixelY, PixelZ: Extended;
  X, Y: Integer;
  P: TPoint;
begin
  PixelX := (Tile.X - SmartGetFieldInt(0, hook_static_BaseX) + OffX) * 512.0;
  X := Tile.X - SmartGetFieldInt(0, hook_static_BaseX);
  Y := Tile.Y - SmartGetFieldInt(0, hook_static_BaseY);
  PixelY := GetTileHeight(Point(X, Y)) - Height;
  PixelZ := (Y + OffY) * 512.0;
  Result := World3DToScreen(PixelX, PixelY, PixelZ);
  P := Result;
  if not MSBox.InBox(P)then
  begin
    Result.X := -1;
    Result.Y := -1;
  end;
end;

(*
TileToMS
~~~~~~~~

.. code-block:: pascal

    function TileToMS(Tile: TTile; Height: Integer): TPoint; overload;

Converts the center of a global tile position and a height above ground level
to a screen location on the main screen, taking camera position and rotation
into account.

.. note::

  by BenLand100

*)
function TileToMS(Tile: TTile; Height: Integer): TPoint; overload;
begin
  Result:= TileToMS(Tile, 0.5, 0.5, height);
end;

(*
TileOnMS
~~~~~~~~

.. code-block:: pascal

    function TileOnMS(Tile: TTile; OffX, OffY: Extended; Height: Integer): Boolean; overload;

Results true if the Tile is on the MS.

.. note::

  by Drags111

*)
function TileOnMS(Tile: TTile; OffX, OffY: Extended; Height: Integer): Boolean; overload;
var
  B: TBox;
begin
  B := Box(MSX1, MSY1, MSX2, MSY2);
  Result := B.InBox(TileToMS(Tile, offX, offY, Height));
end;

(*
TileOnMS
~~~~~~~~

.. code-block:: pascal

    function TileOnMS(Tile: TTile; Height : Integer) : Boolean;

Results true if the Tile is on the MS.

.. note::

  by Drags111

*)
function TileOnMS(Tile: TTile; Height: Integer): Boolean; overload;
var
  B: TBox;
begin
  B := Box(MSX1, MSY1, MSX2, MSY2);
  Result := B.InBox(TileToMS(Tile, Height));
end;

(*
CanReach
~~~~~~~~

.. code-block:: pascal

    function CanReach(Tile: TTile; IsObject: Boolean; CollisionMap: T2DIntArray): Boolean; overload;

Returns true if a tile is reachable from your current position.

.. note::

  by Drags111

*)
function CanReach(Tile: TTile; IsObject: Boolean; CollisionMap: T2DIntArray): Boolean; overload;
begin
  try
    Result := PathLengthBetween(GetMyPos, Tile, IsObject, CollisionMap) <> -1;
  except
    Result := False;
  end;
end;

(*
CanReach
~~~~~~~~

.. code-block:: pascal

    function CanReach(Tile: TTile; IsObject: Boolean): Boolean;

Returns true if a tile is reachable from your current position.

.. note::

  by Drags111

*)
function CanReach(Tile: TTile; IsObject: Boolean): Boolean;
begin
  try
    Result := PathLengthBetween(GetMyPos, Tile, IsObject) <> -1;
  except
    Result := False;
  end;
end;

end.