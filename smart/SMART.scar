unit kronos.smart.SMART;

//  ************************************************************************  \\
//                                                                            \\
//  Wrapper for the SMART [v6.7 Beta] plugin                                  \\
//  Version 2.0                                                               \\
//  By Frederic Hannes (Freddy1990) and Drags111                              \\
//  Latest: http://svn.scar-divi.com/titan_wrappers/SMART.scar                \\
//  SMART Fork: https://github.com/scar-titan/SMART                           \\
//                                                                            \\
//  ************************************************************************  \\

{$GP LibSmart}

interface

uses
  Windows, Mouse, Types;

procedure SmartSetup(const Root, Params: AnsiString; const Width, Height: Integer; const InitSeq: AnsiString);
procedure SmartSetJVMPath(const Path: AnsiString);
function SmartGetDC: HDC;
function SmartGetDebugDC: HDC;
function SmartImageArray: Integer;
function SmartDebugArray: Integer;
function SmartGetRefresh: Integer;
procedure SmartSetRefresh(const x: Integer);
procedure SmartSetTransparentColor(const Color: Integer);
procedure SmartSetDebug(const Enabled: Boolean);
procedure SmartSetGraphics(const Enabled: Boolean);
function SmartActive: Boolean;
function SmartEnabled: Boolean;
procedure SmartGetMousePos(out x, y: Integer);
procedure SmartHoldMouse(const x, y: Integer; const Button: TMouseButton);
procedure SmartReleaseMouse(const x, y: Integer; const Button: TMouseButton);
procedure SmartMoveMouse(const x, y: Integer);
procedure SmartWindMouse(const x, y: Integer);
procedure SmartDragMouse(const x, y: Integer);
procedure SmartClickMouse(const x, y: Integer; const Left: Boolean);
procedure SmartSendKeys(const Text: AnsiString);
procedure SmartHoldKey(const Code: Integer);
procedure SmartReleaseKey(const Code: Integer);
function SmartIsKeyDown(const Code: Integer): Boolean;
function SmartGetColor(const x, y: Integer): Integer;
function SmartFindColor(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2: Integer): Boolean;
function SmartFindColorTolerance(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2, Tol: Integer): Boolean;
function SmartFindColorSpiral(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2: Integer): Boolean;
function SmartFindColorSpiralTolerance(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2, Tol: Integer): Boolean;
function SmartStringFromBytes(const Bytes: Integer; const Str: AnsiString): Integer;
function SmartStringFromChars(const Chars: Integer; const Str: AnsiString): Integer;
function SmartStringFromString(const JStr: Integer; Str: AnsiString): Integer;
function TrimHTML(Str: string): string;
function GetJavaString(JavaString: Integer; MaxLength: Integer): string;
function SmartInvokeIntMethod(const Obj: Integer; const Clazz, Meth: AnsiString; const a, b: Integer): Integer;

function SmartGetFieldObject(const Parent: Integer; const Path: AnsiString): Integer;
function SmartGetFieldString(const Parent: Integer; const Path: AnsiString): String;
function SmartGetFieldInt(const Parent: Integer; const Path: AnsiString): Integer;
function SmartGetFieldShort(const Parent: Integer; const Path: AnsiString): Integer;
function SmartGetFieldByte(const Parent: Integer; const Path: AnsiString): Integer;
function SmartGetFieldFloat(const Parent: Integer; const Path: AnsiString): Extended;
function SmartGetFieldDouble(const Parent: Integer; const Path: AnsiString): Extended;
function SmartGetFieldBoolean(const Parent: Integer; const Path: AnsiString): Boolean;
function SmartGetFieldLongH(const Parent: Integer; const Path: AnsiString): Integer;
function SmartGetFieldLongL(const Parent: Integer; const Path: AnsiString): Integer;

function SmartGetFieldArraySize(const Parent: Integer; const Path: AnsiString; const Dim: Integer): Integer;
function SmartGetFieldArrayObject(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer; overload;
function SmartGetFieldArrayObject(const Parent: Integer; const Path: AnsiString): TIntArray; overload;
function SmartGetFieldArrayString(const Parent: Integer; const Path: AnsiString; const Index: Integer): String; overload;
function SmartGetFieldArrayString(const Parent: Integer; const Path: AnsiString): TStrArray; overload;
function SmartGetFieldArrayInt(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer; overload;
function SmartGetFieldArrayInt(const Parent: Integer; const Path: AnsiString): TIntArray; overload;
function SmartGetFieldArrayFloat(const Parent: Integer; const Path: AnsiString; const Index: Integer): Extended;
function SmartGetFieldArrayDouble(const Parent: Integer; const Path: AnsiString; const Index: Integer): Extended;
function SmartGetFieldArrayLongH(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
function SmartGetFieldArrayLongL(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
function SmartGetFieldArrayBoolean(const Parent: Integer; const Path: AnsiString; const Index: Integer): Boolean;
function SmartGetFieldArrayByte(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
function SmartGetFieldArrayShort(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
function SmartGetFieldArrayChar(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;

function SmartGetFieldArray2DObject(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DString(const Parent: Integer; const Path: AnsiString; const x, y: Integer): String;
function SmartGetFieldArray2DInt(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DFloat(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Extended;
function SmartGetFieldArray2DDouble(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Extended;
function SmartGetFieldArray2DBoolean(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Boolean;
function SmartGetFieldArray2DLongH(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DLongL(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DByte(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DShort(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
function SmartGetFieldArray2DChar(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;

function SmartGetFieldArray3DObject(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DString(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): String;
function SmartGetFieldArray3DInt(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DFloat(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Extended;
function SmartGetFieldArray3DDouble(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Extended;
function SmartGetFieldArray3DBoolean(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Boolean;
function SmartGetFieldArray3DLongH(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DLongL(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DByte(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DShort(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
function SmartGetFieldArray3DChar(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;

function SmartIsPathValid(const Parent: Integer; const Path: AnsiString): Boolean;
function SmartIsEqual(const ObjA, ObjB: Integer): Boolean;
function SmartIsNull(const Obj: Integer): Boolean;
procedure SmartFreeObject(const Obj: Integer); overload;
procedure SmartFreeObject(const Objs: TIntArray); overload;

implementation

procedure SmartSetup(const Root, Params: AnsiString; const Width, Height: Integer; const InitSeq: AnsiString);
begin
  Set_GetMousePos(SmartGetMousePos);
  Set_SetMousePos(SmartMoveMouse);
  Set_HoldMouse(SmartHoldMouse);
  Set_ReleaseMouse(SmartReleaseMouse);
  SMART_Core.SmartSetup(PAnsiChar(Root), PAnsiChar(Params), Width, Height, PAnsiChar(InitSeq));
end;

procedure SmartSetJVMPath(const Path: AnsiString);
begin
  SMART_Core.SmartSetJVMPath(PAnsiChar(Path));
end;

function SmartGetDC: HDC;
begin
  Result := SMART_Core.SmartGetDC();
end;

function SmartGetDebugDC: HDC;
begin
  Result := SMART_Core.SmartGetDebugDC();
end;

function SmartImageArray: Integer;
begin
  Result := SMART_Core.SmartImageArray();
end;

function SmartDebugArray: Integer;
begin
  Result := SMART_Core.SmartDebugArray();
end;

function SmartGetRefresh: Integer;
begin
  Result := SMART_Core.SmartGetRefresh();
end;

procedure SmartSetRefresh(const x: Integer);
begin
  SMART_Core.SmartSetRefresh(x);
end;

procedure SmartSetTransparentColor(const Color: Integer);
begin
  SMART_Core.SmartSetTransparentColor(Color);
end;

procedure SmartSetDebug(const Enabled: Boolean);
begin
  SMART_Core.SmartSetDebug(Enabled);
end;

procedure SmartSetGraphics(const Enabled: Boolean);
begin
  SMART_Core.SmartSetGraphics(Enabled);
end;

function SmartActive: Boolean;
begin
  Result := SMART_Core.SmartActive();
end;

function SmartEnabled: Boolean;
begin
  Result := SMART_Core.SmartEnabled();
end;

procedure SmartGetMousePos(out x, y: Integer);
begin
  SMART_Core.SmartGetMousePos(x, y);
end;

procedure SmartHoldMouse(const x, y: Integer; const Button: TMouseButton);
var
  Left: Boolean;
begin
  Left := Button = mbLeft;
  SMART_Core.SmartHoldMouse(x, y, Left);
end;

procedure SmartReleaseMouse(const x, y: Integer; const Button: TMouseButton);
var
  Left: Boolean;
begin
  Left := Button = mbLeft;
  SMART_Core.SmartReleaseMouse(x, y, Left);
end;

procedure SmartMoveMouse(const x, y: Integer);
begin
  SMART_Core.SmartMoveMouse(x, y);
end;

procedure SmartWindMouse(const x, y: Integer);
begin
  SMART_Core.SmartWindMouse(x, y);
end;

procedure SmartDragMouse(const x, y: Integer);
begin
  SMART_Core.SmartDragMouse(x, y);
end;

procedure SmartClickMouse(const x, y: Integer; const Left: Boolean);
begin
  SMART_Core.SmartClickMouse(x, y, Left);
end;

procedure SmartSendKeys(const Text: AnsiString);
begin
  SMART_Core.SmartSendKeys(PAnsiChar(Text));
end;

procedure SmartHoldKey(const Code: Integer);
begin
  SMART_Core.SmartHoldKey(Code);
end;

procedure SmartReleaseKey(const Code: Integer);
begin
  SMART_Core.SmartReleaseKey(Code);
end;

function SmartIsKeyDown(const Code: Integer): Boolean;
begin
  Result := SMART_Core.SmartIsKeyDown(Code);
end;

function SmartGetColor(const x, y: Integer): Integer;
begin
  Result := SMART_Core.SmartGetColor(x, y);
end;

function SmartFindColor(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2: Integer): Boolean;
begin
  Result := SMART_Core.SmartFindColor(x, y, Color, SAX1, SAY1, SAX2, SAY2);
end;

function SmartFindColorTolerance(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2, Tol: Integer): Boolean;
begin
  Result := SMART_Core.SmartFindColorTolerance(x, y, Color, SAX1, SAY1, SAX2, SAY2, Tol);
end;

function SmartFindColorSpiral(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2: Integer): Boolean;
begin
  Result := SMART_Core.SmartFindColorSpiral(x, y, Color, SAX1, SAY1, SAX2, SAY2);
end;

function SmartFindColorSpiralTolerance(var x, y: Integer; const Color, SAX1, SAY1, SAX2, SAY2, Tol: Integer): Boolean;
begin
  Result := SMART_Core.SmartFindColorSpiralTolerance(x, y, Color, SAX1, SAY1, SAX2, SAY2, Tol);
end;

function SmartStringFromBytes(const Bytes: Integer; const Str: AnsiString): Integer;
begin
  Result := -2;
  if Bytes <= 0 then
    Exit;
  Result := SMART_Core.SmartStringFromBytes(Bytes, PAnsiChar(Str));
end;

function SmartStringFromChars(const Chars: Integer; const Str: AnsiString): Integer;
begin
  Result := -2;
  if Chars <= 0 then
    Exit;
  Result := SMART_Core.SmartStringFromChars(Chars, PAnsiChar(Str));
end;

function SmartStringFromString(const JStr: Integer; Str: AnsiString): Integer;
begin
  Result := -2;
  if JStr <= 0 then
    Exit;
  Result := SMART_Core.SmartStringFromString(JStr, PAnsiChar(Str));
end;

function TrimHTML(Str: string): string;
var
  P, P2, PLength: Integer;
  Temp: String;
begin
  P := Pos('<', Str);
  P2 := Pos('>', Str);
  Result := Str;
  PLength := P2 - P + 1;
  while (P <> 0) and (P2 <> 0) do
  begin
    Delete(Result, P, PLength);
    P := Pos('<', Result);
    Temp := Result;
    Delete(Temp, 1, P - 1);
    PLength := Pos('>', Temp);
  end;
end;

function GetJavaString(JavaString: Integer; MaxLength: Integer): string;
var
  Str: AnsiString;
begin
  try
    SetLength(Str, MaxLength);
    SetLength(Str, SmartStringFromString(JavaString, Str));
    Result := TrimHTML(Str);
    Result := Strings.Replace(Result, '?', '');
    Result := Strings.Replace(Result, #160, #32);
  except
    Println('Error Retrieving Java String;' + ' JavaString: '+ToStr(JavaString));
  end;
end;

function SmartInvokeIntMethod(const Obj: Integer; const Clazz, Meth: AnsiString; const a, b: Integer): Integer;
begin
  Result := SMART_Core.SmartInvokeIntMethod(Obj, PAnsiChar(Clazz), PAnsiChar(Meth), a, b);
end;

function SmartGetFieldObject(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldObject(Parent, PAnsiChar(Path));
end;

function SmartGetFieldString(const Parent: Integer; const Path: AnsiString): String;
var
  Bytes: Integer;
begin
  Result := '';
  if Parent < 0 then
    Exit;
  Bytes := SmartGetFieldObject(Parent, PAnsiChar(Path));
  Result := GetJavaString(Bytes, 512);
  SmartFreeObject(Bytes);
end;

function SmartGetFieldInt(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldInt(Parent, PAnsiChar(Path));
end;

function SmartGetFieldShort(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldShort(Parent, PAnsiChar(Path));
end;

function SmartGetFieldByte(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldByte(Parent, PAnsiChar(Path));
end;

function SmartGetFieldFloat(const Parent: Integer; const Path: AnsiString): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldFloat(Parent, PAnsiChar(Path));
end;

function SmartGetFieldDouble(const Parent: Integer; const Path: AnsiString): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldDouble(Parent, PAnsiChar(Path));
end;

function SmartGetFieldBoolean(const Parent: Integer; const Path: AnsiString): Boolean;
begin
  Result := False;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldBoolean(Parent, PAnsiChar(Path));
end;

function SmartGetFieldLongH(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldLongH(Parent, PAnsiChar(Path));
end;

function SmartGetFieldLongL(const Parent: Integer; const Path: AnsiString): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldLongL(Parent, PAnsiChar(Path));
end;

function SmartGetFieldArraySize(const Parent: Integer; const Path: AnsiString; const Dim: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArraySize(Parent, PAnsiChar(Path), Dim);
end;

function SmartGetFieldArrayObject(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer; overload;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayObject(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayObject(const Parent: Integer; const Path: AnsiString): TIntArray; overload;
var
  L, I: Integer;
begin
  SetLength(Result, 0);
  if Parent < 0 then
    Exit;

  L := SmartGetFieldArraySize(Parent, Path, 1);
  SetLength(Result, L);

  if(L <= 0)then
    Exit;

  for I := 0 to L-1 do
    Result[I] := SmartGetFieldArrayObject(Parent, Path, I);
end;

function SmartGetFieldArrayString(const Parent: Integer; const Path: AnsiString; const Index: Integer): String; overload;
var
  StringObj: Integer;
begin
  Result := '';
  if Parent < 0 then
    Exit;
  StringObj := SMART_Core.SmartGetFieldArrayObject(Parent, PAnsiChar(Path), Index);
  Result := GetJavaString(StringObj, 512);
  SmartFreeObject(StringObj);
end;

function SmartGetFieldArrayString(const Parent: Integer; const Path: AnsiString): TStrArray; overload;
var
  StringObjs: TIntArray;
  I, H: Integer;
begin
  StringObjs := SmartGetFieldArrayObject(Parent, Path);
  SetLength(Result, Length(StringObjs));
  if(Length(Result) < 1)then
    Exit;

  H := High(Result);
  for I := 0 to H do
  begin
    Result[I] := GetJavaString(StringObjs[I], 512);
    SmartFreeObject(StringObjs[I]);
  end;
end;

function SmartGetFieldArrayInt(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer; overload;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayInt(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayInt(const Parent: Integer; const Path: AnsiString): TIntArray; overload;
var
  L, I: Integer;
begin
  SetLength(Result, 0);

  if Parent < 0 then
    Exit;

  L := SmartGetFieldArraySize(Parent, Path, 1);
  if(L < 1)then
    Exit;
  SetLength(Result, L);

  if(L <= 0)then
    Exit;

  for I := 0 to L-1 do
    Result[I] := SmartGetFieldArrayInt(Parent, Path, I);
end;

function SmartGetFieldArrayFloat(const Parent: Integer; const Path: AnsiString; const Index: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayFloat(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayDouble(const Parent: Integer; const Path: AnsiString; const Index: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayDouble(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayLongH(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayLongH(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayLongL(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayLongL(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayBoolean(const Parent: Integer; const Path: AnsiString; const Index: Integer): Boolean;
begin
  Result := False;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayBoolean(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayByte(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayByte(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayShort(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayByte(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArrayChar(const Parent: Integer; const Path: AnsiString; const Index: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArrayChar(Parent, PAnsiChar(Path), Index);
end;

function SmartGetFieldArray2DObject(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DObject(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DString(const Parent: Integer; const Path: AnsiString; const x, y: Integer): String;
var
  StringObj: Integer;
begin
  Result := '';
  if Parent < 0 then
    Exit;
  StringObj := SMART_Core.SmartGetFieldArray2DObject(Parent, PAnsiChar(Path), x, y);
  Result := GetJavaString(StringObj, 512);
  SmartFreeObject(StringObj);
end;

function SmartGetFieldArray2DInt(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DInt(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DFloat(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DFloat(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DDouble(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DDouble(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DBoolean(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Boolean;
begin
  Result := False;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DBoolean(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DLongH(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DLongH(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DLongL(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DLongL(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DByte(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DByte(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DShort(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DShort(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray2DChar(const Parent: Integer; const Path: AnsiString; const x, y: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray2DChar(Parent, PAnsiChar(Path), x, y);
end;

function SmartGetFieldArray3DObject(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DObject(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DString(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): String;
var
  StringObj: Integer;
begin
  Result := '';
  if Parent < 0 then
    Exit;
  StringObj := SMART_Core.SmartGetFieldArray3DObject(Parent, PAnsiChar(Path), x, y, z);
  Result := GetJavaString(StringObj, 512);
  SmartFreeObject(StringObj);
end;

function SmartGetFieldArray3DInt(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DInt(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DFloat(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DFloat(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DDouble(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Extended;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DDouble(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DBoolean(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Boolean;
begin
  Result := False;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DBoolean(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DLongH(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DLongH(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DLongL(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DLongL(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DByte(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DByte(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DShort(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DShort(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartGetFieldArray3DChar(const Parent: Integer; const Path: AnsiString; const x, y, z: Integer): Integer;
begin
  Result := -2;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartGetFieldArray3DChar(Parent, PAnsiChar(Path), x, y, z);
end;

function SmartIsPathValid(const Parent: Integer; const Path: AnsiString): Boolean;
begin
  Result := False;
  if Parent < 0 then
    Exit;
  Result := SMART_Core.SmartIsPathValid(Parent, PAnsiChar(Path));
end;

function SmartIsEqual(const ObjA, ObjB: Integer): Boolean;
begin
  Result := SMART_Core.SmartIsEqual(ObjA, ObjB);
end;

function SmartIsNull(const Obj: Integer): Boolean;
begin
  Result := True;
  if Obj < 0 then
    Exit;
  Result := SMART_Core.SmartIsNull(Obj);
end;

procedure SmartFreeObject(const Obj: Integer); overload;
begin
  if Obj < 0 then
    Exit;
  SMART_Core.SmartFreeObject(Obj);
end;

procedure SmartFreeObject(const Objs: TIntArray); overload;
var
  i, h: Integer;
begin
  h := High(Objs);
  if h < 0 then
    Exit;

  for i := 0 to h do
  begin
    if (Objs[i] < 1) or (SmartIsNull(Objs[i])) then
      Continue;
    SMART_Core.SmartFreeObject(Objs[i]);
  end;
end;

end.